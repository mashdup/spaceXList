//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 6 colors.
  struct color {
    /// Color `Orange`.
    static let orange = Rswift.ColorResource(bundle: R.hostingBundle, name: "Orange")
    /// Color `PrimaryAccent`.
    static let primaryAccent = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryAccent")
    /// Color `PrimaryBackground`.
    static let primaryBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryBackground")
    /// Color `PrimaryFont`.
    static let primaryFont = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryFont")
    /// Color `Red`.
    static let red = Rswift.ColorResource(bundle: R.hostingBundle, name: "Red")
    /// Color `SecondaryBackground`.
    static let secondaryBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryBackground")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Orange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryAccent", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryAccent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryAccent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryFont", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryFont(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryFont, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Orange", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orange(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orange.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PrimaryAccent", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryAccent(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryAccent.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PrimaryBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PrimaryFont", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryFont(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryFont.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SecondaryBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondaryBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondaryBackground.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `Launch Logo`.
    static let launchLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Launch Logo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Launch Logo", bundle: ..., traitCollection: ...)`
    static func launchLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchLogo, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 26 localization keys.
    struct localizable {
      /// Value: %@ was founded by %@ in %@. It has now %@ employees, %@ launch sites, and is valued at USD %@
      static let company_INFO_FORMAT = Rswift.StringResource(key: "COMPANY_INFO_FORMAT", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: All
      static let alL = Rswift.StringResource(key: "ALL", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: All years
      static let all_YEARS = Rswift.StringResource(key: "ALL_YEARS", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ascending date
      static let ascending_DATE = Rswift.StringResource(key: "ASCENDING_DATE", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let canceL = Rswift.StringResource(key: "CANCEL", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Checkout videos
      static let checkout_VIDEOS = Rswift.StringResource(key: "CHECKOUT_VIDEOS", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Company
      static let companY = Rswift.StringResource(key: "COMPANY", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Date/time
      static let date_TIME = Rswift.StringResource(key: "DATE_TIME", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Days
      static let dayS = Rswift.StringResource(key: "DAYS", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Days from now
      static let days_FROM_NOW = Rswift.StringResource(key: "DAYS_FROM_NOW", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Days since now
      static let days_SINCE_NOW = Rswift.StringResource(key: "DAYS_SINCE_NOW", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Failed
      static let faileD = Rswift.StringResource(key: "FAILED", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Filter by year or view all years
      static let select_YEAR_MESSAGE = Rswift.StringResource(key: "SELECT_YEAR_MESSAGE", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: From
      static let froM = Rswift.StringResource(key: "FROM", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Getting rocket
      static let getting_ROCKET = Rswift.StringResource(key: "GETTING_ROCKET", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Launches
      static let launcheS = Rswift.StringResource(key: "LAUNCHES", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Lookup Wikipedia
      static let lookup_WIKIPEDIA = Rswift.StringResource(key: "LOOKUP_WIKIPEDIA", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Mission
      static let missoN = Rswift.StringResource(key: "MISSON", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Rocket
      static let rockeT = Rswift.StringResource(key: "ROCKET", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Since
      static let sincE = Rswift.StringResource(key: "SINCE", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Success
      static let succesS = Rswift.StringResource(key: "SUCCESS", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Successful launch
      static let successful_LAUNCH = Rswift.StringResource(key: "SUCCESSFUL_LAUNCH", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Update filters
      static let update_FILTERS = Rswift.StringResource(key: "UPDATE_FILTERS", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: View article
      static let view_ARTICLE = Rswift.StringResource(key: "VIEW_ARTICLE", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What do you like to do?
      static let what_DO_YOU_LIKE_TO_DO = Rswift.StringResource(key: "WHAT_DO_YOU_LIKE_TO_DO", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Year
      static let yeaR = Rswift.StringResource(key: "YEAR", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: %@ was founded by %@ in %@. It has now %@ employees, %@ launch sites, and is valued at USD %@
      static func company_INFO_FORMAT(_ value1: String, _ value2: String, _ value3: String, _ value4: String, _ value5: String, _ value6: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("COMPANY_INFO_FORMAT", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3, value4, value5, value6)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "COMPANY_INFO_FORMAT"
        }

        let format = NSLocalizedString("COMPANY_INFO_FORMAT", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3, value4, value5, value6)
      }

      /// Value: All
      static func alL(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ALL", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ALL"
        }

        return NSLocalizedString("ALL", bundle: bundle, comment: "")
      }

      /// Value: All years
      static func all_YEARS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ALL_YEARS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ALL_YEARS"
        }

        return NSLocalizedString("ALL_YEARS", bundle: bundle, comment: "")
      }

      /// Value: Ascending date
      static func ascending_DATE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ASCENDING_DATE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ASCENDING_DATE"
        }

        return NSLocalizedString("ASCENDING_DATE", bundle: bundle, comment: "")
      }

      /// Value: Cancel
      static func canceL(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CANCEL", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CANCEL"
        }

        return NSLocalizedString("CANCEL", bundle: bundle, comment: "")
      }

      /// Value: Checkout videos
      static func checkout_VIDEOS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CHECKOUT_VIDEOS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CHECKOUT_VIDEOS"
        }

        return NSLocalizedString("CHECKOUT_VIDEOS", bundle: bundle, comment: "")
      }

      /// Value: Company
      static func companY(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("COMPANY", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "COMPANY"
        }

        return NSLocalizedString("COMPANY", bundle: bundle, comment: "")
      }

      /// Value: Date/time
      static func date_TIME(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DATE_TIME", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DATE_TIME"
        }

        return NSLocalizedString("DATE_TIME", bundle: bundle, comment: "")
      }

      /// Value: Days
      static func dayS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DAYS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DAYS"
        }

        return NSLocalizedString("DAYS", bundle: bundle, comment: "")
      }

      /// Value: Days from now
      static func days_FROM_NOW(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DAYS_FROM_NOW", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DAYS_FROM_NOW"
        }

        return NSLocalizedString("DAYS_FROM_NOW", bundle: bundle, comment: "")
      }

      /// Value: Days since now
      static func days_SINCE_NOW(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DAYS_SINCE_NOW", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DAYS_SINCE_NOW"
        }

        return NSLocalizedString("DAYS_SINCE_NOW", bundle: bundle, comment: "")
      }

      /// Value: Failed
      static func faileD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FAILED", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FAILED"
        }

        return NSLocalizedString("FAILED", bundle: bundle, comment: "")
      }

      /// Value: Filter by year or view all years
      static func select_YEAR_MESSAGE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SELECT_YEAR_MESSAGE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SELECT_YEAR_MESSAGE"
        }

        return NSLocalizedString("SELECT_YEAR_MESSAGE", bundle: bundle, comment: "")
      }

      /// Value: From
      static func froM(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FROM", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FROM"
        }

        return NSLocalizedString("FROM", bundle: bundle, comment: "")
      }

      /// Value: Getting rocket
      static func getting_ROCKET(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GETTING_ROCKET", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "GETTING_ROCKET"
        }

        return NSLocalizedString("GETTING_ROCKET", bundle: bundle, comment: "")
      }

      /// Value: Launches
      static func launcheS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LAUNCHES", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LAUNCHES"
        }

        return NSLocalizedString("LAUNCHES", bundle: bundle, comment: "")
      }

      /// Value: Lookup Wikipedia
      static func lookup_WIKIPEDIA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LOOKUP_WIKIPEDIA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LOOKUP_WIKIPEDIA"
        }

        return NSLocalizedString("LOOKUP_WIKIPEDIA", bundle: bundle, comment: "")
      }

      /// Value: Mission
      static func missoN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MISSON", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MISSON"
        }

        return NSLocalizedString("MISSON", bundle: bundle, comment: "")
      }

      /// Value: Rocket
      static func rockeT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ROCKET", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ROCKET"
        }

        return NSLocalizedString("ROCKET", bundle: bundle, comment: "")
      }

      /// Value: Since
      static func sincE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SINCE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SINCE"
        }

        return NSLocalizedString("SINCE", bundle: bundle, comment: "")
      }

      /// Value: Success
      static func succesS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SUCCESS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SUCCESS"
        }

        return NSLocalizedString("SUCCESS", bundle: bundle, comment: "")
      }

      /// Value: Successful launch
      static func successful_LAUNCH(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SUCCESSFUL_LAUNCH", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SUCCESSFUL_LAUNCH"
        }

        return NSLocalizedString("SUCCESSFUL_LAUNCH", bundle: bundle, comment: "")
      }

      /// Value: Update filters
      static func update_FILTERS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UPDATE_FILTERS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UPDATE_FILTERS"
        }

        return NSLocalizedString("UPDATE_FILTERS", bundle: bundle, comment: "")
      }

      /// Value: View article
      static func view_ARTICLE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VIEW_ARTICLE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "VIEW_ARTICLE"
        }

        return NSLocalizedString("VIEW_ARTICLE", bundle: bundle, comment: "")
      }

      /// Value: What do you like to do?
      static func what_DO_YOU_LIKE_TO_DO(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WHAT_DO_YOU_LIKE_TO_DO", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WHAT_DO_YOU_LIKE_TO_DO"
        }

        return NSLocalizedString("WHAT_DO_YOU_LIKE_TO_DO", bundle: bundle, comment: "")
      }

      /// Value: Year
      static func yeaR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YEAR", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "YEAR"
        }

        return NSLocalizedString("YEAR", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Launch Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Launch Logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "PrimaryBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'PrimaryBackground' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
